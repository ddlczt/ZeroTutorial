// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: space_service.proto
// Protobuf C++ Version: 5.27.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_space_5fservice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_space_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_space_5fservice_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_space_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_space_5fservice_2eproto;
namespace space_service {
class AoiPlayer;
struct AoiPlayerDefaultTypeInternal;
extern AoiPlayerDefaultTypeInternal _AoiPlayer_default_instance_;
class JoinReply;
struct JoinReplyDefaultTypeInternal;
extern JoinReplyDefaultTypeInternal _JoinReply_default_instance_;
class LoginReply;
struct LoginReplyDefaultTypeInternal;
extern LoginReplyDefaultTypeInternal _LoginReply_default_instance_;
class LoginRequest;
struct LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class Movement;
struct MovementDefaultTypeInternal;
extern MovementDefaultTypeInternal _Movement_default_instance_;
class PlayerMovement;
struct PlayerMovementDefaultTypeInternal;
extern PlayerMovementDefaultTypeInternal _PlayerMovement_default_instance_;
class PlayerMovements;
struct PlayerMovementsDefaultTypeInternal;
extern PlayerMovementsDefaultTypeInternal _PlayerMovements_default_instance_;
class PlayersEnterSight;
struct PlayersEnterSightDefaultTypeInternal;
extern PlayersEnterSightDefaultTypeInternal _PlayersEnterSight_default_instance_;
class PlayersLeaveSight;
struct PlayersLeaveSightDefaultTypeInternal;
extern PlayersLeaveSightDefaultTypeInternal _PlayersLeaveSight_default_instance_;
class Vector3f;
struct Vector3fDefaultTypeInternal;
extern Vector3fDefaultTypeInternal _Vector3f_default_instance_;
}  // namespace space_service
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace space_service {

// ===================================================================


// -------------------------------------------------------------------

class Vector3f final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:space_service.Vector3f) */ {
 public:
  inline Vector3f() : Vector3f(nullptr) {}
  ~Vector3f() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Vector3f(
      ::google::protobuf::internal::ConstantInitialized);

  inline Vector3f(const Vector3f& from) : Vector3f(nullptr, from) {}
  inline Vector3f(Vector3f&& from) noexcept
      : Vector3f(nullptr, std::move(from)) {}
  inline Vector3f& operator=(const Vector3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3f& operator=(Vector3f&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3f* internal_default_instance() {
    return reinterpret_cast<const Vector3f*>(
        &_Vector3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Vector3f& a, Vector3f& b) { a.Swap(&b); }
  inline void Swap(Vector3f* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3f* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3f* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Vector3f>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Vector3f& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Vector3f& from) { Vector3f::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Vector3f* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "space_service.Vector3f"; }

 protected:
  explicit Vector3f(::google::protobuf::Arena* arena);
  Vector3f(::google::protobuf::Arena* arena, const Vector3f& from);
  Vector3f(::google::protobuf::Arena* arena, Vector3f&& from) noexcept
      : Vector3f(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 3;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // @@protoc_insertion_point(class_scope:space_service.Vector3f)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Vector3f_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Vector3f& from_msg);
    float x_;
    float y_;
    float z_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_space_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PlayersLeaveSight final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:space_service.PlayersLeaveSight) */ {
 public:
  inline PlayersLeaveSight() : PlayersLeaveSight(nullptr) {}
  ~PlayersLeaveSight() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayersLeaveSight(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayersLeaveSight(const PlayersLeaveSight& from) : PlayersLeaveSight(nullptr, from) {}
  inline PlayersLeaveSight(PlayersLeaveSight&& from) noexcept
      : PlayersLeaveSight(nullptr, std::move(from)) {}
  inline PlayersLeaveSight& operator=(const PlayersLeaveSight& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayersLeaveSight& operator=(PlayersLeaveSight&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayersLeaveSight& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayersLeaveSight* internal_default_instance() {
    return reinterpret_cast<const PlayersLeaveSight*>(
        &_PlayersLeaveSight_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(PlayersLeaveSight& a, PlayersLeaveSight& b) { a.Swap(&b); }
  inline void Swap(PlayersLeaveSight* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayersLeaveSight* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayersLeaveSight* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PlayersLeaveSight>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayersLeaveSight& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayersLeaveSight& from) { PlayersLeaveSight::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayersLeaveSight* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "space_service.PlayersLeaveSight"; }

 protected:
  explicit PlayersLeaveSight(::google::protobuf::Arena* arena);
  PlayersLeaveSight(::google::protobuf::Arena* arena, const PlayersLeaveSight& from);
  PlayersLeaveSight(::google::protobuf::Arena* arena, PlayersLeaveSight&& from) noexcept
      : PlayersLeaveSight(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated string players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;

  public:
  void clear_players() ;
  const std::string& players(int index) const;
  std::string* mutable_players(int index);
  void set_players(int index, const std::string& value);
  void set_players(int index, std::string&& value);
  void set_players(int index, const char* value);
  void set_players(int index, const char* value, std::size_t size);
  void set_players(int index, absl::string_view value);
  std::string* add_players();
  void add_players(const std::string& value);
  void add_players(std::string&& value);
  void add_players(const char* value);
  void add_players(const char* value, std::size_t size);
  void add_players(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& players() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_players();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_players() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_players();

  public:
  // @@protoc_insertion_point(class_scope:space_service.PlayersLeaveSight)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      47, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PlayersLeaveSight_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayersLeaveSight& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> players_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_space_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:space_service.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  ~LoginRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LoginRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline LoginRequest(const LoginRequest& from) : LoginRequest(nullptr, from) {}
  inline LoginRequest(LoginRequest&& from) noexcept
      : LoginRequest(nullptr, std::move(from)) {}
  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
        &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(LoginRequest& a, LoginRequest& b) { a.Swap(&b); }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<LoginRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoginRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LoginRequest& from) { LoginRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LoginRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "space_service.LoginRequest"; }

 protected:
  explicit LoginRequest(::google::protobuf::Arena* arena);
  LoginRequest(::google::protobuf::Arena* arena, const LoginRequest& from);
  LoginRequest(::google::protobuf::Arena* arena, LoginRequest&& from) noexcept
      : LoginRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // @@protoc_insertion_point(class_scope:space_service.LoginRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      43, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_LoginRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LoginRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr username_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_space_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LoginReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:space_service.LoginReply) */ {
 public:
  inline LoginReply() : LoginReply(nullptr) {}
  ~LoginReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LoginReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline LoginReply(const LoginReply& from) : LoginReply(nullptr, from) {}
  inline LoginReply(LoginReply&& from) noexcept
      : LoginReply(nullptr, std::move(from)) {}
  inline LoginReply& operator=(const LoginReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReply& operator=(LoginReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReply* internal_default_instance() {
    return reinterpret_cast<const LoginReply*>(
        &_LoginReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(LoginReply& a, LoginReply& b) { a.Swap(&b); }
  inline void Swap(LoginReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<LoginReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoginReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LoginReply& from) { LoginReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LoginReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "space_service.LoginReply"; }

 protected:
  explicit LoginReply(::google::protobuf::Arena* arena);
  LoginReply(::google::protobuf::Arena* arena, const LoginReply& from);
  LoginReply(::google::protobuf::Arena* arena, LoginReply&& from) noexcept
      : LoginReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result() ;
  ::int32_t result() const;
  void set_result(::int32_t value);

  private:
  ::int32_t _internal_result() const;
  void _internal_set_result(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:space_service.LoginReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_LoginReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LoginReply& from_msg);
    ::int32_t result_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_space_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Movement final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:space_service.Movement) */ {
 public:
  inline Movement() : Movement(nullptr) {}
  ~Movement() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Movement(
      ::google::protobuf::internal::ConstantInitialized);

  inline Movement(const Movement& from) : Movement(nullptr, from) {}
  inline Movement(Movement&& from) noexcept
      : Movement(nullptr, std::move(from)) {}
  inline Movement& operator=(const Movement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Movement& operator=(Movement&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Movement& default_instance() {
    return *internal_default_instance();
  }
  static inline const Movement* internal_default_instance() {
    return reinterpret_cast<const Movement*>(
        &_Movement_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Movement& a, Movement& b) { a.Swap(&b); }
  inline void Swap(Movement* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Movement* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Movement* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Movement>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Movement& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Movement& from) { Movement::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Movement* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "space_service.Movement"; }

 protected:
  explicit Movement(::google::protobuf::Arena* arena);
  Movement(::google::protobuf::Arena* arena, const Movement& from);
  Movement(::google::protobuf::Arena* arena, Movement&& from) noexcept
      : Movement(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
    kVelocityFieldNumber = 3,
  };
  // .space_service.Vector3f position = 1;
  bool has_position() const;
  void clear_position() ;
  const ::space_service::Vector3f& position() const;
  PROTOBUF_NODISCARD ::space_service::Vector3f* release_position();
  ::space_service::Vector3f* mutable_position();
  void set_allocated_position(::space_service::Vector3f* value);
  void unsafe_arena_set_allocated_position(::space_service::Vector3f* value);
  ::space_service::Vector3f* unsafe_arena_release_position();

  private:
  const ::space_service::Vector3f& _internal_position() const;
  ::space_service::Vector3f* _internal_mutable_position();

  public:
  // .space_service.Vector3f rotation = 2;
  bool has_rotation() const;
  void clear_rotation() ;
  const ::space_service::Vector3f& rotation() const;
  PROTOBUF_NODISCARD ::space_service::Vector3f* release_rotation();
  ::space_service::Vector3f* mutable_rotation();
  void set_allocated_rotation(::space_service::Vector3f* value);
  void unsafe_arena_set_allocated_rotation(::space_service::Vector3f* value);
  ::space_service::Vector3f* unsafe_arena_release_rotation();

  private:
  const ::space_service::Vector3f& _internal_rotation() const;
  ::space_service::Vector3f* _internal_mutable_rotation();

  public:
  // .space_service.Vector3f velocity = 3;
  bool has_velocity() const;
  void clear_velocity() ;
  const ::space_service::Vector3f& velocity() const;
  PROTOBUF_NODISCARD ::space_service::Vector3f* release_velocity();
  ::space_service::Vector3f* mutable_velocity();
  void set_allocated_velocity(::space_service::Vector3f* value);
  void unsafe_arena_set_allocated_velocity(::space_service::Vector3f* value);
  ::space_service::Vector3f* unsafe_arena_release_velocity();

  private:
  const ::space_service::Vector3f& _internal_velocity() const;
  ::space_service::Vector3f* _internal_mutable_velocity();

  public:
  // @@protoc_insertion_point(class_scope:space_service.Movement)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Movement_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Movement& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::space_service::Vector3f* position_;
    ::space_service::Vector3f* rotation_;
    ::space_service::Vector3f* velocity_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_space_5fservice_2eproto;
};
// -------------------------------------------------------------------

class JoinReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:space_service.JoinReply) */ {
 public:
  inline JoinReply() : JoinReply(nullptr) {}
  ~JoinReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR JoinReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline JoinReply(const JoinReply& from) : JoinReply(nullptr, from) {}
  inline JoinReply(JoinReply&& from) noexcept
      : JoinReply(nullptr, std::move(from)) {}
  inline JoinReply& operator=(const JoinReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinReply& operator=(JoinReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinReply* internal_default_instance() {
    return reinterpret_cast<const JoinReply*>(
        &_JoinReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(JoinReply& a, JoinReply& b) { a.Swap(&b); }
  inline void Swap(JoinReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<JoinReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JoinReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const JoinReply& from) { JoinReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(JoinReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "space_service.JoinReply"; }

 protected:
  explicit JoinReply(::google::protobuf::Arena* arena);
  JoinReply(::google::protobuf::Arena* arena, const JoinReply& from);
  JoinReply(::google::protobuf::Arena* arena, JoinReply&& from) noexcept
      : JoinReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPositionFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional .space_service.Vector3f position = 2;
  bool has_position() const;
  void clear_position() ;
  const ::space_service::Vector3f& position() const;
  PROTOBUF_NODISCARD ::space_service::Vector3f* release_position();
  ::space_service::Vector3f* mutable_position();
  void set_allocated_position(::space_service::Vector3f* value);
  void unsafe_arena_set_allocated_position(::space_service::Vector3f* value);
  ::space_service::Vector3f* unsafe_arena_release_position();

  private:
  const ::space_service::Vector3f& _internal_position() const;
  ::space_service::Vector3f* _internal_mutable_position();

  public:
  // int32 result = 1;
  void clear_result() ;
  ::int32_t result() const;
  void set_result(::int32_t value);

  private:
  ::int32_t _internal_result() const;
  void _internal_set_result(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:space_service.JoinReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_JoinReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const JoinReply& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::space_service::Vector3f* position_;
    ::int32_t result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_space_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AoiPlayer final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:space_service.AoiPlayer) */ {
 public:
  inline AoiPlayer() : AoiPlayer(nullptr) {}
  ~AoiPlayer() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AoiPlayer(
      ::google::protobuf::internal::ConstantInitialized);

  inline AoiPlayer(const AoiPlayer& from) : AoiPlayer(nullptr, from) {}
  inline AoiPlayer(AoiPlayer&& from) noexcept
      : AoiPlayer(nullptr, std::move(from)) {}
  inline AoiPlayer& operator=(const AoiPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline AoiPlayer& operator=(AoiPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AoiPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const AoiPlayer* internal_default_instance() {
    return reinterpret_cast<const AoiPlayer*>(
        &_AoiPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(AoiPlayer& a, AoiPlayer& b) { a.Swap(&b); }
  inline void Swap(AoiPlayer* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AoiPlayer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AoiPlayer* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AoiPlayer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AoiPlayer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AoiPlayer& from) { AoiPlayer::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AoiPlayer* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "space_service.AoiPlayer"; }

 protected:
  explicit AoiPlayer(::google::protobuf::Arena* arena);
  AoiPlayer(::google::protobuf::Arena* arena, const AoiPlayer& from);
  AoiPlayer(::google::protobuf::Arena* arena, AoiPlayer&& from) noexcept
      : AoiPlayer(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kPositionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .space_service.Vector3f position = 2;
  bool has_position() const;
  void clear_position() ;
  const ::space_service::Vector3f& position() const;
  PROTOBUF_NODISCARD ::space_service::Vector3f* release_position();
  ::space_service::Vector3f* mutable_position();
  void set_allocated_position(::space_service::Vector3f* value);
  void unsafe_arena_set_allocated_position(::space_service::Vector3f* value);
  ::space_service::Vector3f* unsafe_arena_release_position();

  private:
  const ::space_service::Vector3f& _internal_position() const;
  ::space_service::Vector3f* _internal_mutable_position();

  public:
  // @@protoc_insertion_point(class_scope:space_service.AoiPlayer)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      36, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AoiPlayer_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AoiPlayer& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::space_service::Vector3f* position_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_space_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PlayersEnterSight final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:space_service.PlayersEnterSight) */ {
 public:
  inline PlayersEnterSight() : PlayersEnterSight(nullptr) {}
  ~PlayersEnterSight() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayersEnterSight(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayersEnterSight(const PlayersEnterSight& from) : PlayersEnterSight(nullptr, from) {}
  inline PlayersEnterSight(PlayersEnterSight&& from) noexcept
      : PlayersEnterSight(nullptr, std::move(from)) {}
  inline PlayersEnterSight& operator=(const PlayersEnterSight& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayersEnterSight& operator=(PlayersEnterSight&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayersEnterSight& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayersEnterSight* internal_default_instance() {
    return reinterpret_cast<const PlayersEnterSight*>(
        &_PlayersEnterSight_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(PlayersEnterSight& a, PlayersEnterSight& b) { a.Swap(&b); }
  inline void Swap(PlayersEnterSight* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayersEnterSight* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayersEnterSight* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PlayersEnterSight>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayersEnterSight& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayersEnterSight& from) { PlayersEnterSight::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayersEnterSight* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "space_service.PlayersEnterSight"; }

 protected:
  explicit PlayersEnterSight(::google::protobuf::Arena* arena);
  PlayersEnterSight(::google::protobuf::Arena* arena, const PlayersEnterSight& from);
  PlayersEnterSight(::google::protobuf::Arena* arena, PlayersEnterSight&& from) noexcept
      : PlayersEnterSight(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .space_service.AoiPlayer players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;

  public:
  void clear_players() ;
  ::space_service::AoiPlayer* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField<::space_service::AoiPlayer>* mutable_players();

  private:
  const ::google::protobuf::RepeatedPtrField<::space_service::AoiPlayer>& _internal_players() const;
  ::google::protobuf::RepeatedPtrField<::space_service::AoiPlayer>* _internal_mutable_players();
  public:
  const ::space_service::AoiPlayer& players(int index) const;
  ::space_service::AoiPlayer* add_players();
  const ::google::protobuf::RepeatedPtrField<::space_service::AoiPlayer>& players() const;
  // @@protoc_insertion_point(class_scope:space_service.PlayersEnterSight)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PlayersEnterSight_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayersEnterSight& from_msg);
    ::google::protobuf::RepeatedPtrField< ::space_service::AoiPlayer > players_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_space_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PlayerMovement final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:space_service.PlayerMovement) */ {
 public:
  inline PlayerMovement() : PlayerMovement(nullptr) {}
  ~PlayerMovement() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerMovement(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerMovement(const PlayerMovement& from) : PlayerMovement(nullptr, from) {}
  inline PlayerMovement(PlayerMovement&& from) noexcept
      : PlayerMovement(nullptr, std::move(from)) {}
  inline PlayerMovement& operator=(const PlayerMovement& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerMovement& operator=(PlayerMovement&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerMovement& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerMovement* internal_default_instance() {
    return reinterpret_cast<const PlayerMovement*>(
        &_PlayerMovement_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(PlayerMovement& a, PlayerMovement& b) { a.Swap(&b); }
  inline void Swap(PlayerMovement* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerMovement* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerMovement* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PlayerMovement>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerMovement& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayerMovement& from) { PlayerMovement::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayerMovement* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "space_service.PlayerMovement"; }

 protected:
  explicit PlayerMovement(::google::protobuf::Arena* arena);
  PlayerMovement(::google::protobuf::Arena* arena, const PlayerMovement& from);
  PlayerMovement(::google::protobuf::Arena* arena, PlayerMovement&& from) noexcept
      : PlayerMovement(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .space_service.Movement data = 2;
  bool has_data() const;
  void clear_data() ;
  const ::space_service::Movement& data() const;
  PROTOBUF_NODISCARD ::space_service::Movement* release_data();
  ::space_service::Movement* mutable_data();
  void set_allocated_data(::space_service::Movement* value);
  void unsafe_arena_set_allocated_data(::space_service::Movement* value);
  ::space_service::Movement* unsafe_arena_release_data();

  private:
  const ::space_service::Movement& _internal_data() const;
  ::space_service::Movement* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:space_service.PlayerMovement)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      41, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PlayerMovement_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayerMovement& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::space_service::Movement* data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_space_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PlayerMovements final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:space_service.PlayerMovements) */ {
 public:
  inline PlayerMovements() : PlayerMovements(nullptr) {}
  ~PlayerMovements() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerMovements(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerMovements(const PlayerMovements& from) : PlayerMovements(nullptr, from) {}
  inline PlayerMovements(PlayerMovements&& from) noexcept
      : PlayerMovements(nullptr, std::move(from)) {}
  inline PlayerMovements& operator=(const PlayerMovements& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerMovements& operator=(PlayerMovements&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerMovements& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerMovements* internal_default_instance() {
    return reinterpret_cast<const PlayerMovements*>(
        &_PlayerMovements_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(PlayerMovements& a, PlayerMovements& b) { a.Swap(&b); }
  inline void Swap(PlayerMovements* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerMovements* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerMovements* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PlayerMovements>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerMovements& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayerMovements& from) { PlayerMovements::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayerMovements* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "space_service.PlayerMovements"; }

 protected:
  explicit PlayerMovements(::google::protobuf::Arena* arena);
  PlayerMovements(::google::protobuf::Arena* arena, const PlayerMovements& from);
  PlayerMovements(::google::protobuf::Arena* arena, PlayerMovements&& from) noexcept
      : PlayerMovements(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .space_service.PlayerMovement datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;

  public:
  void clear_datas() ;
  ::space_service::PlayerMovement* mutable_datas(int index);
  ::google::protobuf::RepeatedPtrField<::space_service::PlayerMovement>* mutable_datas();

  private:
  const ::google::protobuf::RepeatedPtrField<::space_service::PlayerMovement>& _internal_datas() const;
  ::google::protobuf::RepeatedPtrField<::space_service::PlayerMovement>* _internal_mutable_datas();
  public:
  const ::space_service::PlayerMovement& datas(int index) const;
  ::space_service::PlayerMovement* add_datas();
  const ::google::protobuf::RepeatedPtrField<::space_service::PlayerMovement>& datas() const;
  // @@protoc_insertion_point(class_scope:space_service.PlayerMovements)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PlayerMovements_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayerMovements& from_msg);
    ::google::protobuf::RepeatedPtrField< ::space_service::PlayerMovement > datas_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_space_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Vector3f

// float x = 1;
inline void Vector3f::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline float Vector3f::x() const {
  // @@protoc_insertion_point(field_get:space_service.Vector3f.x)
  return _internal_x();
}
inline void Vector3f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:space_service.Vector3f.x)
}
inline float Vector3f::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void Vector3f::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// float y = 2;
inline void Vector3f::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline float Vector3f::y() const {
  // @@protoc_insertion_point(field_get:space_service.Vector3f.y)
  return _internal_y();
}
inline void Vector3f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:space_service.Vector3f.y)
}
inline float Vector3f::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void Vector3f::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// float z = 3;
inline void Vector3f::clear_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = 0;
}
inline float Vector3f::z() const {
  // @@protoc_insertion_point(field_get:space_service.Vector3f.z)
  return _internal_z();
}
inline void Vector3f::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:space_service.Vector3f.z)
}
inline float Vector3f::_internal_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.z_;
}
inline void Vector3f::_internal_set_z(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// Movement

// .space_service.Vector3f position = 1;
inline bool Movement::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void Movement::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::space_service::Vector3f& Movement::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::space_service::Vector3f* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::space_service::Vector3f&>(::space_service::_Vector3f_default_instance_);
}
inline const ::space_service::Vector3f& Movement::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:space_service.Movement.position)
  return _internal_position();
}
inline void Movement::unsafe_arena_set_allocated_position(::space_service::Vector3f* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::space_service::Vector3f*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:space_service.Movement.position)
}
inline ::space_service::Vector3f* Movement::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::space_service::Vector3f* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::space_service::Vector3f* Movement::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:space_service.Movement.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::space_service::Vector3f* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::space_service::Vector3f* Movement::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::space_service::Vector3f>(GetArena());
    _impl_.position_ = reinterpret_cast<::space_service::Vector3f*>(p);
  }
  return _impl_.position_;
}
inline ::space_service::Vector3f* Movement::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::space_service::Vector3f* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:space_service.Movement.position)
  return _msg;
}
inline void Movement::set_allocated_position(::space_service::Vector3f* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::space_service::Vector3f*>(value);
  // @@protoc_insertion_point(field_set_allocated:space_service.Movement.position)
}

// .space_service.Vector3f rotation = 2;
inline bool Movement::has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline void Movement::clear_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rotation_ != nullptr) _impl_.rotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::space_service::Vector3f& Movement::_internal_rotation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::space_service::Vector3f* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::space_service::Vector3f&>(::space_service::_Vector3f_default_instance_);
}
inline const ::space_service::Vector3f& Movement::rotation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:space_service.Movement.rotation)
  return _internal_rotation();
}
inline void Movement::unsafe_arena_set_allocated_rotation(::space_service::Vector3f* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = reinterpret_cast<::space_service::Vector3f*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:space_service.Movement.rotation)
}
inline ::space_service::Vector3f* Movement::release_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::space_service::Vector3f* released = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::space_service::Vector3f* Movement::unsafe_arena_release_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:space_service.Movement.rotation)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::space_service::Vector3f* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::space_service::Vector3f* Movement::_internal_mutable_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rotation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::space_service::Vector3f>(GetArena());
    _impl_.rotation_ = reinterpret_cast<::space_service::Vector3f*>(p);
  }
  return _impl_.rotation_;
}
inline ::space_service::Vector3f* Movement::mutable_rotation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::space_service::Vector3f* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:space_service.Movement.rotation)
  return _msg;
}
inline void Movement::set_allocated_rotation(::space_service::Vector3f* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.rotation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.rotation_ = reinterpret_cast<::space_service::Vector3f*>(value);
  // @@protoc_insertion_point(field_set_allocated:space_service.Movement.rotation)
}

// .space_service.Vector3f velocity = 3;
inline bool Movement::has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline void Movement::clear_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::space_service::Vector3f& Movement::_internal_velocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::space_service::Vector3f* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::space_service::Vector3f&>(::space_service::_Vector3f_default_instance_);
}
inline const ::space_service::Vector3f& Movement::velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:space_service.Movement.velocity)
  return _internal_velocity();
}
inline void Movement::unsafe_arena_set_allocated_velocity(::space_service::Vector3f* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = reinterpret_cast<::space_service::Vector3f*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:space_service.Movement.velocity)
}
inline ::space_service::Vector3f* Movement::release_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::space_service::Vector3f* released = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::space_service::Vector3f* Movement::unsafe_arena_release_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:space_service.Movement.velocity)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::space_service::Vector3f* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::space_service::Vector3f* Movement::_internal_mutable_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.velocity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::space_service::Vector3f>(GetArena());
    _impl_.velocity_ = reinterpret_cast<::space_service::Vector3f*>(p);
  }
  return _impl_.velocity_;
}
inline ::space_service::Vector3f* Movement::mutable_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::space_service::Vector3f* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:space_service.Movement.velocity)
  return _msg;
}
inline void Movement::set_allocated_velocity(::space_service::Vector3f* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.velocity_ = reinterpret_cast<::space_service::Vector3f*>(value);
  // @@protoc_insertion_point(field_set_allocated:space_service.Movement.velocity)
}

// -------------------------------------------------------------------

// LoginRequest

// string username = 1;
inline void LoginRequest::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& LoginRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:space_service.LoginRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:space_service.LoginRequest.username)
}
inline std::string* LoginRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:space_service.LoginRequest.username)
  return _s;
}
inline const std::string& LoginRequest::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void LoginRequest::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* LoginRequest::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* LoginRequest::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:space_service.LoginRequest.username)
  return _impl_.username_.Release();
}
inline void LoginRequest::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:space_service.LoginRequest.username)
}

// -------------------------------------------------------------------

// LoginReply

// int32 result = 1;
inline void LoginReply::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline ::int32_t LoginReply::result() const {
  // @@protoc_insertion_point(field_get:space_service.LoginReply.result)
  return _internal_result();
}
inline void LoginReply::set_result(::int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:space_service.LoginReply.result)
}
inline ::int32_t LoginReply::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_;
}
inline void LoginReply::_internal_set_result(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// -------------------------------------------------------------------

// JoinReply

// int32 result = 1;
inline void JoinReply::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline ::int32_t JoinReply::result() const {
  // @@protoc_insertion_point(field_get:space_service.JoinReply.result)
  return _internal_result();
}
inline void JoinReply::set_result(::int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:space_service.JoinReply.result)
}
inline ::int32_t JoinReply::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_;
}
inline void JoinReply::_internal_set_result(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// optional .space_service.Vector3f position = 2;
inline bool JoinReply::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void JoinReply::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::space_service::Vector3f& JoinReply::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::space_service::Vector3f* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::space_service::Vector3f&>(::space_service::_Vector3f_default_instance_);
}
inline const ::space_service::Vector3f& JoinReply::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:space_service.JoinReply.position)
  return _internal_position();
}
inline void JoinReply::unsafe_arena_set_allocated_position(::space_service::Vector3f* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::space_service::Vector3f*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:space_service.JoinReply.position)
}
inline ::space_service::Vector3f* JoinReply::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::space_service::Vector3f* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::space_service::Vector3f* JoinReply::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:space_service.JoinReply.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::space_service::Vector3f* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::space_service::Vector3f* JoinReply::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::space_service::Vector3f>(GetArena());
    _impl_.position_ = reinterpret_cast<::space_service::Vector3f*>(p);
  }
  return _impl_.position_;
}
inline ::space_service::Vector3f* JoinReply::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::space_service::Vector3f* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:space_service.JoinReply.position)
  return _msg;
}
inline void JoinReply::set_allocated_position(::space_service::Vector3f* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::space_service::Vector3f*>(value);
  // @@protoc_insertion_point(field_set_allocated:space_service.JoinReply.position)
}

// -------------------------------------------------------------------

// AoiPlayer

// string name = 1;
inline void AoiPlayer::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AoiPlayer::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:space_service.AoiPlayer.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AoiPlayer::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:space_service.AoiPlayer.name)
}
inline std::string* AoiPlayer::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:space_service.AoiPlayer.name)
  return _s;
}
inline const std::string& AoiPlayer::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void AoiPlayer::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* AoiPlayer::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* AoiPlayer::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:space_service.AoiPlayer.name)
  return _impl_.name_.Release();
}
inline void AoiPlayer::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:space_service.AoiPlayer.name)
}

// .space_service.Vector3f position = 2;
inline bool AoiPlayer::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void AoiPlayer::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::space_service::Vector3f& AoiPlayer::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::space_service::Vector3f* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::space_service::Vector3f&>(::space_service::_Vector3f_default_instance_);
}
inline const ::space_service::Vector3f& AoiPlayer::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:space_service.AoiPlayer.position)
  return _internal_position();
}
inline void AoiPlayer::unsafe_arena_set_allocated_position(::space_service::Vector3f* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::space_service::Vector3f*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:space_service.AoiPlayer.position)
}
inline ::space_service::Vector3f* AoiPlayer::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::space_service::Vector3f* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::space_service::Vector3f* AoiPlayer::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:space_service.AoiPlayer.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::space_service::Vector3f* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::space_service::Vector3f* AoiPlayer::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::space_service::Vector3f>(GetArena());
    _impl_.position_ = reinterpret_cast<::space_service::Vector3f*>(p);
  }
  return _impl_.position_;
}
inline ::space_service::Vector3f* AoiPlayer::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::space_service::Vector3f* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:space_service.AoiPlayer.position)
  return _msg;
}
inline void AoiPlayer::set_allocated_position(::space_service::Vector3f* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::space_service::Vector3f*>(value);
  // @@protoc_insertion_point(field_set_allocated:space_service.AoiPlayer.position)
}

// -------------------------------------------------------------------

// PlayersEnterSight

// repeated .space_service.AoiPlayer players = 1;
inline int PlayersEnterSight::_internal_players_size() const {
  return _internal_players().size();
}
inline int PlayersEnterSight::players_size() const {
  return _internal_players_size();
}
inline void PlayersEnterSight::clear_players() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.players_.Clear();
}
inline ::space_service::AoiPlayer* PlayersEnterSight::mutable_players(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:space_service.PlayersEnterSight.players)
  return _internal_mutable_players()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::space_service::AoiPlayer>* PlayersEnterSight::mutable_players()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:space_service.PlayersEnterSight.players)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_players();
}
inline const ::space_service::AoiPlayer& PlayersEnterSight::players(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:space_service.PlayersEnterSight.players)
  return _internal_players().Get(index);
}
inline ::space_service::AoiPlayer* PlayersEnterSight::add_players() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::space_service::AoiPlayer* _add = _internal_mutable_players()->Add();
  // @@protoc_insertion_point(field_add:space_service.PlayersEnterSight.players)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::space_service::AoiPlayer>& PlayersEnterSight::players() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:space_service.PlayersEnterSight.players)
  return _internal_players();
}
inline const ::google::protobuf::RepeatedPtrField<::space_service::AoiPlayer>&
PlayersEnterSight::_internal_players() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.players_;
}
inline ::google::protobuf::RepeatedPtrField<::space_service::AoiPlayer>*
PlayersEnterSight::_internal_mutable_players() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.players_;
}

// -------------------------------------------------------------------

// PlayersLeaveSight

// repeated string players = 1;
inline int PlayersLeaveSight::_internal_players_size() const {
  return _internal_players().size();
}
inline int PlayersLeaveSight::players_size() const {
  return _internal_players_size();
}
inline void PlayersLeaveSight::clear_players() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.players_.Clear();
}
inline std::string* PlayersLeaveSight::add_players()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_players()->Add();
  // @@protoc_insertion_point(field_add_mutable:space_service.PlayersLeaveSight.players)
  return _s;
}
inline const std::string& PlayersLeaveSight::players(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:space_service.PlayersLeaveSight.players)
  return _internal_players().Get(index);
}
inline std::string* PlayersLeaveSight::mutable_players(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:space_service.PlayersLeaveSight.players)
  return _internal_mutable_players()->Mutable(index);
}
inline void PlayersLeaveSight::set_players(int index, const std::string& value) {
  _internal_mutable_players()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:space_service.PlayersLeaveSight.players)
}
inline void PlayersLeaveSight::set_players(int index, std::string&& value) {
  _internal_mutable_players()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:space_service.PlayersLeaveSight.players)
}
inline void PlayersLeaveSight::set_players(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_players()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:space_service.PlayersLeaveSight.players)
}
inline void PlayersLeaveSight::set_players(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_players()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:space_service.PlayersLeaveSight.players)
}
inline void PlayersLeaveSight::set_players(int index, absl::string_view value) {
  _internal_mutable_players()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:space_service.PlayersLeaveSight.players)
}
inline void PlayersLeaveSight::add_players(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_players()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:space_service.PlayersLeaveSight.players)
}
inline void PlayersLeaveSight::add_players(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_players()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:space_service.PlayersLeaveSight.players)
}
inline void PlayersLeaveSight::add_players(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_players()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:space_service.PlayersLeaveSight.players)
}
inline void PlayersLeaveSight::add_players(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_players()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:space_service.PlayersLeaveSight.players)
}
inline void PlayersLeaveSight::add_players(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_players()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:space_service.PlayersLeaveSight.players)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PlayersLeaveSight::players() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:space_service.PlayersLeaveSight.players)
  return _internal_players();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PlayersLeaveSight::mutable_players() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:space_service.PlayersLeaveSight.players)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_players();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PlayersLeaveSight::_internal_players() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.players_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PlayersLeaveSight::_internal_mutable_players() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.players_;
}

// -------------------------------------------------------------------

// PlayerMovement

// string name = 1;
inline void PlayerMovement::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PlayerMovement::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:space_service.PlayerMovement.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerMovement::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:space_service.PlayerMovement.name)
}
inline std::string* PlayerMovement::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:space_service.PlayerMovement.name)
  return _s;
}
inline const std::string& PlayerMovement::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void PlayerMovement::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PlayerMovement::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PlayerMovement::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:space_service.PlayerMovement.name)
  return _impl_.name_.Release();
}
inline void PlayerMovement::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:space_service.PlayerMovement.name)
}

// .space_service.Movement data = 2;
inline bool PlayerMovement::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void PlayerMovement::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::space_service::Movement& PlayerMovement::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::space_service::Movement* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::space_service::Movement&>(::space_service::_Movement_default_instance_);
}
inline const ::space_service::Movement& PlayerMovement::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:space_service.PlayerMovement.data)
  return _internal_data();
}
inline void PlayerMovement::unsafe_arena_set_allocated_data(::space_service::Movement* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::space_service::Movement*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:space_service.PlayerMovement.data)
}
inline ::space_service::Movement* PlayerMovement::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::space_service::Movement* released = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::space_service::Movement* PlayerMovement::unsafe_arena_release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:space_service.PlayerMovement.data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::space_service::Movement* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::space_service::Movement* PlayerMovement::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::space_service::Movement>(GetArena());
    _impl_.data_ = reinterpret_cast<::space_service::Movement*>(p);
  }
  return _impl_.data_;
}
inline ::space_service::Movement* PlayerMovement::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::space_service::Movement* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:space_service.PlayerMovement.data)
  return _msg;
}
inline void PlayerMovement::set_allocated_data(::space_service::Movement* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.data_ = reinterpret_cast<::space_service::Movement*>(value);
  // @@protoc_insertion_point(field_set_allocated:space_service.PlayerMovement.data)
}

// -------------------------------------------------------------------

// PlayerMovements

// repeated .space_service.PlayerMovement datas = 1;
inline int PlayerMovements::_internal_datas_size() const {
  return _internal_datas().size();
}
inline int PlayerMovements::datas_size() const {
  return _internal_datas_size();
}
inline void PlayerMovements::clear_datas() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datas_.Clear();
}
inline ::space_service::PlayerMovement* PlayerMovements::mutable_datas(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:space_service.PlayerMovements.datas)
  return _internal_mutable_datas()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::space_service::PlayerMovement>* PlayerMovements::mutable_datas()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:space_service.PlayerMovements.datas)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_datas();
}
inline const ::space_service::PlayerMovement& PlayerMovements::datas(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:space_service.PlayerMovements.datas)
  return _internal_datas().Get(index);
}
inline ::space_service::PlayerMovement* PlayerMovements::add_datas() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::space_service::PlayerMovement* _add = _internal_mutable_datas()->Add();
  // @@protoc_insertion_point(field_add:space_service.PlayerMovements.datas)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::space_service::PlayerMovement>& PlayerMovements::datas() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:space_service.PlayerMovements.datas)
  return _internal_datas();
}
inline const ::google::protobuf::RepeatedPtrField<::space_service::PlayerMovement>&
PlayerMovements::_internal_datas() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.datas_;
}
inline ::google::protobuf::RepeatedPtrField<::space_service::PlayerMovement>*
PlayerMovements::_internal_mutable_datas() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.datas_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace space_service


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_space_5fservice_2eproto_2epb_2eh
